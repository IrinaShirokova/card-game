[{"E:\\IT-PROJECTS\\card-game\\src\\App.js":"1","E:\\IT-PROJECTS\\card-game\\src\\components\\game-field\\index.js":"2","E:\\IT-PROJECTS\\card-game\\src\\components\\card\\index.js":"3","E:\\IT-PROJECTS\\card-game\\src\\api\\game-data.js":"4","E:\\IT-PROJECTS\\card-game\\src\\components\\card-icon\\index.js":"5","E:\\IT-PROJECTS\\card-game\\src\\components\\empty-cell\\index.js":"6","E:\\IT-PROJECTS\\card-game\\src\\index.js":"7","E:\\IT-PROJECTS\\card-game\\src\\reportWebVitals.js":"8"},{"size":373,"mtime":1610876956324,"results":"9","hashOfConfig":"10"},{"size":5365,"mtime":1610876956331,"results":"11","hashOfConfig":"10"},{"size":615,"mtime":1610876956328,"results":"12","hashOfConfig":"10"},{"size":322,"mtime":1610876956326,"results":"13","hashOfConfig":"10"},{"size":1781,"mtime":1610876956327,"results":"14","hashOfConfig":"10"},{"size":459,"mtime":1610876956329,"results":"15","hashOfConfig":"10"},{"size":455,"mtime":1610733345328,"results":"16","hashOfConfig":"10"},{"size":362,"mtime":1610476698288,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15irn7c",{"filePath":"20","messages":"21","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"23"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"23"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\IT-PROJECTS\\card-game\\src\\App.js",[],"E:\\IT-PROJECTS\\card-game\\src\\components\\game-field\\index.js",["38","39","40","41","42"],"import React, {useEffect, useCallback, useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from \"../card\";\r\nimport EmptyCell from \"../empty-cell\";\r\nimport gamedata from \"../../api/game-data\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: \"100%\"\r\n    },\r\n  }));\r\n\r\n  const GameField = () => {\r\n    const classes = useStyles();\r\n    const [cards, setCards] = useState([]);\r\n    const [steps, setSteps] = useState([]);\r\n    const [firstCardOpen, setFirstCardOpen] = useState(null);\r\n    const [secondCardOpen, setSecondCardOpen] = useState(null);\r\n    const [currentHideCard, setCurrentHideCard] = useState(-1);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [timer, setTimer] = useState(null);\r\n    const [seconds, setSeconds] = useState(0);\r\n\r\n    useEffect(() => {\r\n      setCards(gamedata.generateCardArray());\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      if (firstCardOpen !== null \r\n        && secondCardOpen !== null \r\n        && firstCardOpen.id !== secondCardOpen.id) {          \r\n          checkGameStep();               \r\n        }\r\n    }, [firstCardOpen, secondCardOpen]);\r\n\r\n    useEffect(() => {\r\n      gameover();\r\n    }, [currentHideCard]);\r\n\r\n    const shuffleCards = () => {\r\n      let newCards = cards.sort(() => Math.random() - 0.5);\r\n      setCards(newCards);\r\n    }\r\n\r\n    const startGame = useCallback(() => {\r\n      shuffleCards();\r\n      const interval = setInterval(() => {\r\n        setSeconds(seconds => seconds + 1);\r\n      }, 1000);\r\n      return () => clearInterval(interval);     \r\n    }, []);\r\n\r\n    const swipeCard = useCallback((card) => {\r\n      if (firstCardOpen !== null) {\r\n        if (firstCardOpen.id !== card.id) {\r\n          setSecondCardOpen(card);\r\n        } else {\r\n          closeCardPair();\r\n        }\r\n      } else {\r\n        setFirstCardOpen(card);\r\n        setSecondCardOpen(null);\r\n      }\r\n    },[firstCardOpen, secondCardOpen]);\r\n\r\n    const checkGameStep = () => {    \r\n      if (firstCardOpen.iconId === secondCardOpen.iconId) {\r\n          createStepLog(firstCardOpen.id, secondCardOpen.id, true);\r\n          let newCards = cards;\r\n          newCards.map(c => {\r\n            if (c.iconId === firstCardOpen.iconId) {\r\n              c.visible = false;  \r\n              setCurrentHideCard(c.id);   \r\n            }           \r\n          });\r\n          setCards(newCards); \r\n          closeCardPair();                     \r\n      } else {\r\n        createStepLog(firstCardOpen.id, secondCardOpen.id, false);   \r\n        let timer = setTimeout(() => {\r\n          closeCardPair();  \r\n        }, 5000);   \r\n        return () => {\r\n          clearTimeout(timer)\r\n        }                   \r\n      }               \r\n    }\r\n\r\n    const closeCardPair = () => {\r\n        setFirstCardOpen(null);\r\n        setSecondCardOpen(null);      \r\n    }\r\n\r\n    const createStepLog = (firstId, secondId, success) => {\r\n      let newStep = {\r\n        id: steps.length + 1,\r\n        firstCard: firstId, \r\n        secondCard: secondId,\r\n        success: success\r\n      };\r\n      let newSteps = steps;\r\n      newSteps.push(newStep);\r\n      setSteps(newSteps);\r\n    }\r\n\r\n    const gameover = () => {\r\n      if (cards.length > 0 && !gameOver && steps.length > 0) {          \r\n        let res = cards.findIndex(c => c.visible === true);\r\n        if (res === -1) {\r\n          setGameOver(true); \r\n        }\r\n      }\r\n    }\r\n  \r\n    return (\r\n      <div className={classes.root}>\r\n        <Grid container justify=\"center\" spacing={2}>\r\n        <Grid item xs={4}>\r\n        <Button onClick={startGame} variant=\"contained\" color=\"secondary\">\r\n          СТАРТ\r\n        </Button>\r\n        <Typography component=\"h2\" variant=\"caption\" color=\"secondary\">\r\n          ПРОШЛО {seconds} СЕКУНД\r\n        </Typography>\r\n\r\n          <Typography component=\"h2\" variant=\"h5\">Ход игры</Typography>\r\n          {steps.map(step => <Typography key={`card-item-${step.id}`} \r\n                              variant=\"caption\" display=\"block\" \r\n                              style={{color: step.success ? '#4caf50' : '#dc004e'}}>\r\n                Шаг {step.id}. Карточки ({step.firstCard},{step.secondCard})\r\n            </Typography>)}\r\n        </Grid>\r\n        <Grid item xs={8} container justify=\"center\" spacing={2}>\r\n            {!gameOver ? \r\n                cards.map(cardItem => \r\n                    <Grid key={`card-item-${cardItem.id}`} item xs={2}>\r\n                      {cardItem.visible ?\r\n                        <Card open={cardItem.id === firstCardOpen?.id || cardItem.id === secondCardOpen?.id} \r\n                              iconId={cardItem.iconId}\r\n                              onCardClick={() => swipeCard(cardItem)}/>\r\n                              : <EmptyCell/>\r\n                      }\r\n                    </Grid>)\r\n                :\r\n                <div>\r\n                  <h2>GAME OVER!</h2>\r\n                  Примите наши поздравления! Вы справились за <strong>{steps.length}</strong> шагов!\r\n                </div>\r\n            }\r\n        </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  export default GameField;",["43","44"],"E:\\IT-PROJECTS\\card-game\\src\\components\\card\\index.js",[],"E:\\IT-PROJECTS\\card-game\\src\\api\\game-data.js",["45"],"export function generateCardArray () {\r\n    let cards = [];\r\n    for (let i = 1; i <= 36; i ++) {\r\n        let j = i > 18 ? i - 18 : i;\r\n        let card = {\r\n            id: i,\r\n            iconId: j,\r\n            visible: true\r\n        }\r\n        cards.push(card);\r\n    }\r\n    return cards;\r\n};\r\n\r\nexport function secondsToTime(seconds){\r\n    let ostatokSecondsM = seconds % (60 * 60);\r\n    let ostatokSecondsS = ostatokSecondsM % 60;\r\n    let finalHours = Math.floor(seconds / (60 * 60));\r\n    let finalMinutes = Math.floor(ostatokSecondsM / 60);\r\n    let finalSeconds = Math.ceil(ostatokSecondsS);\r\n\r\n    let fullTime = {\r\n      \"h\": finalHours,\r\n      \"m\": finalMinutes,\r\n      \"s\": finalSeconds\r\n    };\r\n    return fullTime;\r\n  }\r\n\r\nexport default {\r\n    generateCardArray,\r\n    secondsToTime\r\n};","E:\\IT-PROJECTS\\card-game\\src\\components\\card-icon\\index.js",[],"E:\\IT-PROJECTS\\card-game\\src\\components\\empty-cell\\index.js",["46"],"import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        minWidth: \"80px\",\r\n        height: \"80px\",      \r\n        backgroundColor: \"rgba(0, 0, 0, 0.1)\"\r\n    }\r\n  }));\r\n\r\nconst EmptyCell = () => {\r\n    const classes = useStyles();\r\n    return <div className={classes.root}/>\r\n}\r\n\r\nexport default EmptyCell;","E:\\IT-PROJECTS\\card-game\\src\\index.js",[],"E:\\IT-PROJECTS\\card-game\\src\\reportWebVitals.js",[],{"ruleId":"47","severity":1,"message":"48","line":39,"column":8,"nodeType":"49","endLine":39,"endColumn":39,"suggestions":"50"},{"ruleId":"47","severity":1,"message":"51","line":43,"column":8,"nodeType":"49","endLine":43,"endColumn":25,"suggestions":"52"},{"ruleId":"47","severity":1,"message":"53","line":60,"column":8,"nodeType":"49","endLine":60,"endColumn":45,"suggestions":"54"},{"ruleId":"47","severity":1,"message":"55","line":77,"column":7,"nodeType":"49","endLine":77,"endColumn":38,"suggestions":"56"},{"ruleId":"57","severity":1,"message":"58","line":85,"column":26,"nodeType":"59","messageId":"60","endLine":85,"endColumn":28},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":30,"column":1,"nodeType":"67","endLine":33,"endColumn":3},{"ruleId":"68","severity":1,"message":"69","line":2,"column":8,"nodeType":"70","messageId":"71","endLine":2,"endColumn":13},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'checkGameStep', 'timer', and 'timerPair'. Either include them or remove the dependency array.","ArrayExpression",["72"],"React Hook useEffect has a missing dependency: 'gameover'. Either include it or remove the dependency array.",["73"],"React Hook useCallback has a missing dependency: 'shuffleCards'. Either include it or remove the dependency array.",["74"],"React Hook useCallback has missing dependencies: 'timer' and 'timerPair'. Either include them or remove the dependency array.",["75"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-native-reassign",["76"],"no-negated-in-lhs",["77"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'Paper' is defined but never used.","Identifier","unusedVar",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [checkGameStep, firstCardOpen, secondCardOpen, timer, timerPair]",{"range":"86","text":"87"},"Update the dependencies array to be: [currentHideCard, gameover]",{"range":"88","text":"89"},"Update the dependencies array to be: [shuffleCards]",{"range":"90","text":"91"},"Update the dependencies array to be: [firstCardOpen, secondCardOpen, timer, timerPair]",{"range":"92","text":"93"},[1355,1386],"[checkGameStep, firstCardOpen, secondCardOpen, timer, timerPair]",[1441,1458],"[currentHideCard, gameover]",[1905,1942],"[shuffleCards]",[2396,2427],"[firstCardOpen, secondCardOpen, timer, timerPair]"]